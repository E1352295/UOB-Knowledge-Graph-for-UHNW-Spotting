{
  "name": "WikiData",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2460,
        -1160
      ],
      "id": "8e8010e4-1a9e-449f-8549-44cddf22b385",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  url: `https://www.wikidata.org/w/api.php?action=wbsearchentities&search=${encodeURIComponent($json.name)}&language=en&format=json`,\n  offset: 0\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1820,
        -980
      ],
      "id": "b37019f6-507d-40f6-b615-4f504d675a32",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "730d63c5-969b-445b-8014-1b6dd7a28a9e",
              "name": "query",
              "value": "=#####  Multi-person enrichment  –  kinship + core facts + wealth & roles  #####\n# This query is ready for n8n: inject a space‑separated list of Q‑IDs via {{ $json.qid }}\n# It fetches UHNW‑relevant attributes (net worth, key roles), kinship links, and core facts.\n\nSELECT DISTINCT\n  ?person              ?personLabel\n  ?dateOfBirth\n  ?citizenship         ?citizenshipLabel\n  ?officialWebsite                       # P856 – external home page\n  ?netWorth                              # P2218 – net worth (latest stated value)\n  ?occupation          ?occupationLabel  # P106 – primary occupation(s)\n  ?employer            ?employerLabel    # P108 – main employer / affiliated org\n  ?positionHeld        ?positionHeldLabel # P39 – notable public positions\n  ?spouse              ?spouseLabel      # P26\n  ?father              ?fatherLabel      # P22\n  ?mother              ?motherLabel      # P25\n  ?child               ?childLabel       # P40\n  ?sibling             ?siblingLabel     # P3373\n  ?relative            ?relativeLabel    # P1038 – other relatives\nWHERE {\n  VALUES ?person { wd:{{ $('Loop Over Items1').item.json.qid }}}   # <-- injected by n8n\n\n  # ——— core personal facts ———\n  OPTIONAL { ?person wdt:P569  ?dateOfBirth. }\n  OPTIONAL { ?person wdt:P27   ?citizenship. }\n  OPTIONAL { ?person wdt:P856  ?officialWebsite. }\n  OPTIONAL { ?person wdt:P2218 ?netWorth. }\n\n  # ——— professional context ———\n  OPTIONAL { ?person wdt:P106  ?occupation. }\n  OPTIONAL { ?person wdt:P108  ?employer. }\n  OPTIONAL { ?person wdt:P39   ?positionHeld. }\n\n  # ——— kinship network ———\n  OPTIONAL { ?person wdt:P26   ?spouse. }\n  OPTIONAL { ?person wdt:P22   ?father. }\n  OPTIONAL { ?person wdt:P25   ?mother. }\n  OPTIONAL { ?person wdt:P40   ?child. }\n  OPTIONAL { ?person wdt:P3373 ?sibling. }\n  OPTIONAL { ?person wdt:P1038 ?relative. }\n\n  # ——— add human‑readable labels ———\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n  }\n}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -60,
        -680
      ],
      "id": "08163b07-7882-4ec8-a294-108ff7f1bba9",
      "name": "Set Query"
    },
    {
      "parameters": {
        "url": "=https://query.wikidata.org/sparql",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            },
            {
              "name": "format",
              "value": "json"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "User-Agent: n8n-forbes-sg50/0.1 2260115144@qq.com"
            },
            {
              "name": "Accept",
              "value": "application/sparql-results+json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        -680
      ],
      "id": "8b047004-9702-4968-a84f-cacc06baee8d",
      "name": "Query SPARQL Wikidata1"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "User-Agent: n8n-forbes-sg50/0.1 2260115144@qq.com"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1600,
        -980
      ],
      "id": "5d3b4629-17b2-45f4-beda-5b35197d9826",
      "name": "wbsearchentities"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2040,
        -880
      ],
      "id": "826f20eb-9721-40ec-a511-c8ec33e87c4d",
      "name": "When Executed by Another Workflow",
      "disabled": true
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=python3 /files/wikidata/process_wd_full_clean.py --state-file /files/wikidata/shared_state.json --data-file  /files/wikidata/data.json << \"EOF\"\n{{ JSON.stringify($input.all().map(i => i.json)) }}\nEOF\n\n#--reset"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -280,
        -1000
      ],
      "id": "47a4c833-7c88-4f09-955c-fd1ff6aabb35",
      "name": "Execute Command",
      "notes": "#echo $'{{ JSON.stringify($input.all().map(i => i.json)) }}' | python3 /files/wikidata/process_wd.py --state-file /files/wikidata/shared_state.json --data-file  /files/wikidata/data.json\n"
    },
    {
      "parameters": {
        "jsCode": "const out = [];\nfor (const item of items) {\n  try {\n    // 把 stdout 字符串解析成对象\n    const parsed = JSON.parse(item.json.stdout);\n\n    // 继续把解析后的内容放进 item.json，方便后续节点使用\n    out.push({ json: parsed });\n  } catch (err) {\n    // 若解析失败，可选择抛错或跳过\n    throw new Error(`JSON parse error: ${err.message}`);\n  }\n}\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        -1005
      ],
      "id": "dfe750f8-c012-4b75-b532-0124dde9ac73",
      "name": "Parse to JSON"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c9020422-e17c-433b-beed-e10c748f27dd",
              "leftValue": "={{ $json.exitCode }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -60,
        -1005
      ],
      "id": "4636c14b-8ee1-42f0-96fc-a44cc04fc897",
      "name": "Python process_wd Success"
    },
    {
      "parameters": {
        "jsCode": "const out = [];\nfor (const n of $json.next) {\n  out.push({ json: n });   // 每个 n = { qid: \"Qxxxx\" }\n}\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        -930
      ],
      "id": "e99b1a49-db8a-4915-8c31-e2639d3a17bc",
      "name": "Expand next",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// 输入 items: 每个 item.json.search 都是一个 wbsearchentities 的结果数组\n// 输出 items: 每个 item 都只含一个 qid（来自 search 中的一个元素）\n\nreturn items.flatMap(item => {\n  const hits = item.json.search || [];\n  // 对每个 hit 都生成一个新的输出 item\n  return hits.map(hit => ({\n    json: {\n      qid: hit.id,\n      // label: hit.label,    // 可选：原始返回里还有 label 和 description\n      // description: hit.description,\n    }\n  }));\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1380,
        -980
      ],
      "id": "e584495a-017c-4a72-9a30-88b4f97e67eb",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/files/wikidata/raw/wikidat_raw_{{ $('Loop Over Items1').item.json.qid }}_{{$now.format(\"dd_LL_yyyy\")}}.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        640,
        -640
      ],
      "id": "fef9670f-34fa-494e-bfc1-56dcf2ea5c27",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -940,
        -930
      ],
      "id": "9e64a139-d1de-4065-a4c2-0efabff1cca1",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "return [\n  { \"name\": \"Eduardo Saverin\",                     \"qid\": \"Q312663\" },\n  { \"name\": \"Robert Ng\",                           \"qid\": \"Q126488\" },\n  { \"name\": \"Philip Ng Chee Tat\",                  \"qid\": \"Q8968777\" },\n  { \"name\": \"Li Xiting\",                           \"qid\": \"Q60539018\" },\n  { \"name\": \"Kwek Leng Beng\",                      \"qid\": \"Q8963128\" },\n  { \"name\": \"Goh Cheng Liang\",                     \"qid\": \"Q18921786\" },\n  { \"name\": \"Khoo Teck Puat\",                      \"qid\": \"Q1387731\",   \"note\": \"represents Khoo family\" },\n  { \"name\": \"Wee Cho Yaw\",                         \"qid\": \"Q2484368\",  \"note\": \"represents Wee family\" },\n  { \"name\": \"Kwee Liong Tek\",                      \"qid\": \"Q106932598\",\"note\": \"Kwee brother\" },\n  { \"name\": \"Kwee Liong Keng\",                     \"qid\": \"Q106932765\",\"note\": \"Kwee brother\" },\n  { \"name\": \"Leo KoGuan\",                          \"qid\": \"Q18234353\" },\n  { \"name\": \"Zhang Yong\",                          \"qid\": \"Q18234033\", \"note\": \"Haidilao co-founder\" },\n  { \"name\": \"Shu Ping\",                            \"qid\": null,        \"note\": \"Haidilao co-founder—no item yet\" },\n  { \"name\": \"Forrest Li\",                          \"qid\": \"Q61974364\" },\n  { \"name\": \"Kuok Khoon Hong\",                     \"qid\": \"Q16149275\" },\n  { \"name\": \"Robert Friedland\",                    \"qid\": \"Q7344541\" },\n  { \"name\": \"Raj Kumar\",                           \"qid\": null,        \"note\": \"patriarch of RB Capital—no item\" },\n  { \"name\": \"Kishin RK\",                           \"qid\": \"Q106957661\"},\n  { \"name\": \"Gang Ye\",                             \"qid\": null,        \"note\": \"Sea Ltd COO—no item\" },\n  { \"name\": \"Lien family\",                         \"qid\": null },\n  { \"name\": \"Richard Chandler\",                    \"qid\": \"Q323506\"    },\n  { \"name\": \"Choo Chong Ngen\",                     \"qid\": null },\n  { \"name\": \"Ho family\",                           \"qid\": null },\n  { \"name\": \"Sam Goi\",                             \"qid\": \"Q18377911\" },\n  { \"name\": \"Arvind Tiku\",                         \"qid\": null },\n  { \"name\": \"Ji Qi\",                               \"qid\": null },\n  { \"name\": \"Liang Xinjun\",                        \"qid\": null },\n  { \"name\": \"Oei Hong Leong\",                      \"qid\": null },\n  { \"name\": \"Peter Lim\",                           \"qid\": \"Q7210804\"  },\n  { \"name\": \"Ong Beng Seng\",                       \"qid\": \"Q2082346\"  },\n  { \"name\": \"Christina Ong\",                       \"qid\": \"Q5102510\"  },\n  { \"name\": \"Asok Kumar Hiranandani\",              \"qid\": null },\n  { \"name\": \"Koh Wee Meng\",                        \"qid\": null },\n  { \"name\": \"Ron Sim\",                             \"qid\": \"Q447463\",   \"note\": \"same-name wrestler—verify before use\" },\n  { \"name\": \"Min-Liang Tan\",                       \"qid\": \"Q6839529\"  },\n  { \"name\": \"Tay family\",                          \"qid\": null },\n  { \"name\": \"Tang Wee Kit\",                        \"qid\": null },\n  { \"name\": \"Binny Bansal\",                        \"qid\": \"Q4743209\"  },\n  { \"name\": \"Chew Gek Khim\",                       \"qid\": null },\n  { \"name\": \"Lim Hock Chee\",                       \"qid\": null },\n  { \"name\": \"Yao Hsiao Tung\",                      \"qid\": null },\n  { \"name\": \"Chua Thian Poh\",                      \"qid\": \"Q5102514\"  },\n  { \"name\": \"Wong brothers\",                       \"qid\": null },\n  { \"name\": \"Michael Kum\",                         \"qid\": null },\n  { \"name\": \"John Lim\",                            \"qid\": null },\n  { \"name\": \"Lim Kaling\",                          \"qid\": null },\n  { \"name\": \"Muhammed Aziz Khan\",                  \"qid\": \"Q16768640\" },\n  { \"name\": \"Lim Chap Huat\",                       \"qid\": null },\n  { \"name\": \"Zhong Sheng Jian\",                    \"qid\": \"Q8068097\"  },\n  { \"name\": \"David Xueling Li\",                    \"qid\": \"Q5336874\"  },\n  { \"name\": \"Saurabh Mittal\",                      \"qid\": \"Q19866937\" },\n  { \"name\": \"George Raymond Zage III\",             \"qid\": null },\n  { \"name\": \"Laurent Junique\",                     \"qid\": null },\n  { \"name\": \"David Chen\",                          \"qid\": null }\n]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2320,
        -500
      ],
      "id": "30196e55-db82-4024-b437-a90b9245c062",
      "name": "All QIDs",
      "notes": "return [\n  {\n    \"qid\": \"Q312663\"\n  },\n  {\n    \"qid\": \"Q11979011\"\n  },\n  {\n    \"qid\": \"Q60539018\"\n  },\n  {\n    \"qid\": \"Q115591726\"\n  },\n  {\n    \"qid\": \"Q18921786\"\n  },\n  {\n    \"qid\": \"Q19561122\"\n  },\n  {\n    \"qid\": \"Q24833790\"\n  },\n  {\n    \"qid\": \"Q3065295\"\n  },\n  {\n    \"qid\": \"Q56180092\"\n  },\n  {\n    \"qid\": \"Q10898335\"\n  },\n  {\n    \"qid\": \"Q109370581\"\n  },\n  {\n    \"qid\": \"Q49854513\"\n  },\n  {\n    \"qid\": \"Q6515698\"\n  },\n  {\n    \"qid\": \"Q10950793\"\n  },\n  {\n    \"qid\": \"Q61974364\"\n  },\n  {\n    \"qid\": \"Q107488186\"\n  },\n  {\n    \"qid\": \"Q104262030\"\n  },\n  {\n    \"qid\": \"Q113194117\"\n  },\n  {\n    \"qid\": \"Q112815816\"\n  },\n  {\n    \"qid\": \"Q89709800\"\n  },\n  {\n    \"qid\": \"Q7344541\"\n  },\n  {\n    \"qid\": \"Q115592106\"\n  },\n  {\n    \"qid\": \"Q95949074\"\n  },\n  {\n    \"qid\": \"Q104652141\"\n  },\n  {\n    \"qid\": \"Q113833190\"\n  },\n  {\n    \"qid\": \"Q1763647\"\n  },\n  {\n    \"qid\": \"Q87676541\"\n  },\n  {\n    \"qid\": \"Q90636541\"\n  },\n  {\n    \"qid\": \"Q89083236\"\n  },\n  {\n    \"qid\": \"Q102186294\"\n  },\n  {\n    \"qid\": \"Q115735505\"\n  },\n  {\n    \"qid\": \"Q133690150\"\n  },\n  {\n    \"qid\": \"Q12582983\"\n  },\n  {\n    \"qid\": \"Q102483755\"\n  },\n  {\n    \"qid\": \"Q100768959\"\n  },\n  {\n    \"qid\": \"Q323506\"\n  },\n  {\n    \"qid\": \"Q102128541\"\n  },\n  {\n    \"qid\": \"Q91221833\"\n  },\n  {\n    \"qid\": \"Q18530777\"\n  },\n  {\n    \"qid\": \"Q76019805\"\n  },\n  {\n    \"qid\": \"Q115591141\"\n  },\n  {\n    \"qid\": \"Q10886259\"\n  },\n  {\n    \"qid\": \"Q18377911\"\n  },\n  {\n    \"qid\": \"Q102507436\"\n  },\n  {\n    \"qid\": \"Q62654030\"\n  },\n  {\n    \"qid\": \"Q57029995\"\n  },\n  {\n    \"qid\": \"Q89211292\"\n  },\n  {\n    \"qid\": \"Q53370316\"\n  },\n  {\n    \"qid\": \"Q45680156\"\n  },\n  {\n    \"qid\": \"Q87781615\"\n  },\n  {\n    \"qid\": \"Q11113686\"\n  },\n  {\n    \"qid\": \"Q17410891\"\n  },\n  {\n    \"qid\": \"Q92959664\"\n  },\n  {\n    \"qid\": \"Q7175463\"\n  },\n  {\n    \"qid\": \"Q60451741\"\n  },\n  {\n    \"qid\": \"Q91398010\"\n  },\n  {\n    \"qid\": \"Q50772343\"\n  },\n  {\n    \"qid\": \"Q110638033\"\n  },\n  {\n    \"qid\": \"Q2076673\"\n  },\n  {\n    \"qid\": \"Q2076677\"\n  },\n  {\n    \"qid\": \"Q106957648\"\n  },\n  {\n    \"qid\": \"Q115591667\"\n  },\n  {\n    \"qid\": \"Q9304173\"\n  },\n  {\n    \"qid\": \"Q40580417\"\n  },\n  {\n    \"qid\": \"Q100923146\"\n  },\n  {\n    \"qid\": \"Q85243805\"\n  },\n  {\n    \"qid\": \"Q447463\"\n  },\n  {\n    \"qid\": \"Q7364391\"\n  },\n  {\n    \"qid\": \"Q16106091\"\n  },\n  {\n    \"qid\": \"Q17486463\"\n  },\n  {\n    \"qid\": \"Q115592361\"\n  },\n  {\n    \"qid\": \"Q47666687\"\n  },\n  {\n    \"qid\": \"Q8032039\"\n  },\n  {\n    \"qid\": \"Q56247652\"\n  },\n  {\n    \"qid\": \"Q103357674\"\n  },\n  {\n    \"qid\": \"Q15055782\"\n  },\n  {\n    \"qid\": \"Q134621030\"\n  },\n  {\n    \"qid\": \"Q92129\"\n  },\n  {\n    \"qid\": \"Q87767930\"\n  },\n  {\n    \"qid\": \"Q15621822\"\n  },\n  {\n    \"qid\": \"Q102785167\"\n  },\n  {\n    \"qid\": \"Q167683\"\n  },\n  {\n    \"qid\": \"Q11271610\"\n  },\n  {\n    \"qid\": \"Q5356374\"\n  },\n  {\n    \"qid\": \"Q115591582\"\n  },\n  {\n    \"qid\": \"Q21557249\"\n  },\n  {\n    \"qid\": \"Q85251417\"\n  },\n  {\n    \"qid\": \"Q16063074\"\n  },\n  {\n    \"qid\": \"Q24005555\"\n  },\n  {\n    \"qid\": \"Q115591733\"\n  },\n  {\n    \"qid\": \"Q9360527\"\n  },\n  {\n    \"qid\": \"Q92000478\"\n  },\n  {\n    \"qid\": \"Q96405026\"\n  },\n  {\n    \"qid\": \"Q57848210\"\n  },\n  {\n    \"qid\": \"Q100550522\"\n  },\n  {\n    \"qid\": \"Q47874677\"\n  },\n  {\n    \"qid\": \"Q82776435\"\n  },\n  {\n    \"qid\": \"Q102188820\"\n  },\n  {\n    \"qid\": \"Q106359160\"\n  },\n  {\n    \"qid\": \"Q79797991\"\n  },\n  {\n    \"qid\": \"Q20576953\"\n  }\n]"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        380,
        -680
      ],
      "id": "e18efb39-59a8-4293-814e-1229237240e5",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "fileSelector": "=/files/wikidata/raw/wikidat_raw_{{ $('Loop Over Items').item.json.qid }}_*.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -900,
        -1360
      ],
      "id": "f9cb6725-0844-45b1-be86-36eb4b307bfc",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -680,
        -1360
      ],
      "id": "b58ffc9f-2bbc-4179-938b-97fd9f9c9534",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f154a456-02cc-4439-845b-d60eeb7eed67",
              "leftValue": "={{ $json.qid }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2040,
        -580
      ],
      "id": "52706767-408f-444f-9899-daa015f435aa",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -720,
        -530
      ],
      "id": "b788524b-f6aa-4946-82ad-17f37c0afd42",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2e7a9d3e-ca82-43f9-b463-6ed2649a07a6",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            },
            {
              "id": "1c8e8e5b-f016-44e2-9aeb-e59511aba5ba",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "EXISTS",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -280,
        -680
      ],
      "id": "fbe441b2-947f-4f05-81b5-be95d79f6ffe",
      "name": "If1"
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "=ls /files/wikidata/raw/wikidat_raw_{{ $('Loop Over Items1').item.json.qid }}_*.json 1>/dev/null 2>&1 && echo EXISTS\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -500,
        -680
      ],
      "id": "25c82bb7-2429-47ec-9c51-b165bbf903c3",
      "name": "Execute Command2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "faef73a8-7fc4-4923-b1ba-379d4e11f892",
              "leftValue": 1,
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1460,
        -480
      ],
      "id": "2e63aff9-7343-4632-9c81-1e7f7c4c2ebc",
      "name": "Run Data Collection"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "faef73a8-7fc4-4923-b1ba-379d4e11f892",
              "leftValue": 1,
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1540,
        -700
      ],
      "id": "3400bea2-2bfc-46f3-9542-2e472ed3e007",
      "name": "Run NER with Python"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -1140,
        -460
      ],
      "id": "a3bb2d5f-057e-4b07-b9b5-dd023403c677",
      "name": "Limit",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "730d63c5-969b-445b-8014-1b6dd7a28a9e",
              "name": "query",
              "value": "=#####  Multi-person enrichment  –  kinship + core facts + wealth & roles  #####\n# This query is ready for n8n: inject a space‑separated list of Q‑IDs via {{ $json.qid }}\n# It fetches UHNW‑relevant attributes (net worth, key roles), kinship links, and core facts.\n\nSELECT DISTINCT\n  ?person              ?personLabel\n  ?dateOfBirth\n  ?citizenship         ?citizenshipLabel\n  ?officialWebsite                       # P856 – external home page\n  ?netWorth                              # P2218 – net worth (latest stated value)\n  ?occupation          ?occupationLabel  # P106 – primary occupation(s)\n  ?employer            ?employerLabel    # P108 – main employer / affiliated org\n  ?positionHeld        ?positionHeldLabel # P39 – notable public positions\n  ?spouse              ?spouseLabel      # P26\n  ?father              ?fatherLabel      # P22\n  ?mother              ?motherLabel      # P25\n  ?child               ?childLabel       # P40\n  ?sibling             ?siblingLabel     # P3373\n  ?relative            ?relativeLabel    # P1038 – other relatives\nWHERE {\n  VALUES ?person { wd:{{ $('Loop Over Items').item.json.qid }}}   # <-- injected by n8n\n\n  # ——— core personal facts ———\n  OPTIONAL { ?person wdt:P569  ?dateOfBirth. }\n  OPTIONAL { ?person wdt:P27   ?citizenship. }\n  OPTIONAL { ?person wdt:P856  ?officialWebsite. }\n  OPTIONAL { ?person wdt:P2218 ?netWorth. }\n\n  # ——— professional context ———\n  OPTIONAL { ?person wdt:P106  ?occupation. }\n  OPTIONAL { ?person wdt:P108  ?employer. }\n  OPTIONAL { ?person wdt:P39   ?positionHeld. }\n\n  # ——— kinship network ———\n  OPTIONAL { ?person wdt:P26   ?spouse. }\n  OPTIONAL { ?person wdt:P22   ?father. }\n  OPTIONAL { ?person wdt:P25   ?mother. }\n  OPTIONAL { ?person wdt:P40   ?child. }\n  OPTIONAL { ?person wdt:P3373 ?sibling. }\n  OPTIONAL { ?person wdt:P1038 ?relative. }\n\n  # ——— add human‑readable labels ———\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n  }\n}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -700,
        -1000
      ],
      "id": "4367d2a4-41f8-4229-94c7-ae502aa0392a",
      "name": "Set Query1"
    },
    {
      "parameters": {
        "url": "=https://query.wikidata.org/sparql",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            },
            {
              "name": "format",
              "value": "json"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "User-Agent: n8n-forbes-sg50/0.1 2260115144@qq.com"
            },
            {
              "name": "Accept",
              "value": "application/sparql-results+json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        -1000
      ],
      "id": "6927d646-b2ca-4a3f-b604-1e2e40248c15",
      "name": "Query SPARQL Wikidata"
    },
    {
      "parameters": {
        "jsCode": "return [\n  { \"name\": \"Eduardo Saverin\",                     \"qid\": \"Q312663\" },\n  { \"name\": \"Robert Ng\",                           \"qid\": \"Q126488\" },\n  { \"name\": \"Philip Ng Chee Tat\",                  \"qid\": \"Q8968777\" },\n  { \"name\": \"Li Xiting\",                           \"qid\": \"Q60539018\" },\n  { \"name\": \"Kwek Leng Beng\",                      \"qid\": \"Q8963128\" },\n  { \"name\": \"Goh Cheng Liang\",                     \"qid\": \"Q18921786\" },\n  { \"name\": \"Khoo Teck Puat\",                      \"qid\": \"Q1387731\",   \"note\": \"represents Khoo family\" },\n  { \"name\": \"Wee Cho Yaw\",                         \"qid\": \"Q2484368\",  \"note\": \"represents Wee family\" },\n  { \"name\": \"Kwee Liong Tek\",                      \"qid\": \"Q106932598\",\"note\": \"Kwee brother\" },\n  { \"name\": \"Kwee Liong Keng\",                     \"qid\": \"Q106932765\",\"note\": \"Kwee brother\" },\n  { \"name\": \"Leo KoGuan\",                          \"qid\": \"Q18234353\" },\n  { \"name\": \"Zhang Yong\",                          \"qid\": \"Q18234033\", \"note\": \"Haidilao co-founder\" },\n  { \"name\": \"Shu Ping\",                            \"qid\": null,        \"note\": \"Haidilao co-founder—no item yet\" },\n  { \"name\": \"Forrest Li\",                          \"qid\": \"Q61974364\" },\n  { \"name\": \"Kuok Khoon Hong\",                     \"qid\": \"Q16149275\" },\n  { \"name\": \"Robert Friedland\",                    \"qid\": \"Q7344541\" },\n  { \"name\": \"Raj Kumar\",                           \"qid\": null,        \"note\": \"patriarch of RB Capital—no item\" },\n  { \"name\": \"Kishin RK\",                           \"qid\": \"Q106957661\"},\n  { \"name\": \"Gang Ye\",                             \"qid\": null,        \"note\": \"Sea Ltd COO—no item\" },\n  { \"name\": \"Lien family\",                         \"qid\": null },\n  { \"name\": \"Richard Chandler\",                    \"qid\": \"Q323506\"    },\n  { \"name\": \"Choo Chong Ngen\",                     \"qid\": null },\n  { \"name\": \"Ho family\",                           \"qid\": null },\n  { \"name\": \"Sam Goi\",                             \"qid\": \"Q18377911\" },\n  { \"name\": \"Arvind Tiku\",                         \"qid\": null },\n  { \"name\": \"Ji Qi\",                               \"qid\": null },\n  { \"name\": \"Liang Xinjun\",                        \"qid\": null },\n  { \"name\": \"Oei Hong Leong\",                      \"qid\": null },\n  { \"name\": \"Peter Lim\",                           \"qid\": \"Q7210804\"  },\n  { \"name\": \"Ong Beng Seng\",                       \"qid\": \"Q2082346\"  },\n  { \"name\": \"Christina Ong\",                       \"qid\": \"Q5102510\"  },\n  { \"name\": \"Asok Kumar Hiranandani\",              \"qid\": null },\n  { \"name\": \"Koh Wee Meng\",                        \"qid\": null },\n  { \"name\": \"Ron Sim\",                             \"qid\": \"Q447463\",   \"note\": \"same-name wrestler—verify before use\" },\n  { \"name\": \"Min-Liang Tan\",                       \"qid\": \"Q6839529\"  },\n  { \"name\": \"Tay family\",                          \"qid\": null },\n  { \"name\": \"Tang Wee Kit\",                        \"qid\": null },\n  { \"name\": \"Binny Bansal\",                        \"qid\": \"Q4743209\"  },\n  { \"name\": \"Chew Gek Khim\",                       \"qid\": null },\n  { \"name\": \"Lim Hock Chee\",                       \"qid\": null },\n  { \"name\": \"Yao Hsiao Tung\",                      \"qid\": null },\n  { \"name\": \"Chua Thian Poh\",                      \"qid\": \"Q5102514\"  },\n  { \"name\": \"Wong brothers\",                       \"qid\": null },\n  { \"name\": \"Michael Kum\",                         \"qid\": null },\n  { \"name\": \"John Lim\",                            \"qid\": null },\n  { \"name\": \"Lim Kaling\",                          \"qid\": null },\n  { \"name\": \"Muhammed Aziz Khan\",                  \"qid\": \"Q16768640\" },\n  { \"name\": \"Lim Chap Huat\",                       \"qid\": null },\n  { \"name\": \"Zhong Sheng Jian\",                    \"qid\": \"Q8068097\"  },\n  { \"name\": \"David Xueling Li\",                    \"qid\": \"Q5336874\"  },\n  { \"name\": \"Saurabh Mittal\",                      \"qid\": \"Q19866937\" },\n  { \"name\": \"George Raymond Zage III\",             \"qid\": null },\n  { \"name\": \"Laurent Junique\",                     \"qid\": null },\n  { \"name\": \"David Chen\",                          \"qid\": null }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2040,
        -1080
      ],
      "id": "459d153d-a828-47c0-834c-2363aeb49bdd",
      "name": "All Names"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "All Names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "wbsearchentities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Query": {
      "main": [
        [
          {
            "node": "Query SPARQL Wikidata1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wbsearchentities": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query SPARQL Wikidata1": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Python process_wd Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Python process_wd Success": {
      "main": [
        [
          {
            "node": "Parse to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse to JSON": {
      "main": [
        [
          {
            "node": "Expand next",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expand next": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set Query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All QIDs": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Run NER with Python",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Execute Command2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command2": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Data Collection": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run NER with Python": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Query1": {
      "main": [
        [
          {
            "node": "Query SPARQL Wikidata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query SPARQL Wikidata": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All Names": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7eacc89b-e421-471d-994e-3c0321985106",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "70232b1931410b16ff30066cebf27f070772e4fb9654f8dda3bb39f2d0a7022c"
  },
  "id": "uomcNSgNmKTDROPQ",
  "tags": []
}