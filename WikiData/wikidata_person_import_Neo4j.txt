// -----------------------------------------------------------------------------
// Wikidata UHNW Person Import for Neo4j Aura
// -----------------------------------------------------------------------------
// 1. Upload /mnt/data/data.json to a publicly‑reachable URL (e.g. S3 presigned URL)
//    and paste that URL below.  Aura cannot access your local filesystem.
// 2. Run this script in Neo4j Browser or cypher‑shell (Aura connection).
// 3. Compatible with the existing SGX‑Annual‑Report + MAS Key‑Personnel model:
//      • Nodes      :Person (qid as primary key)
//      • Properties :name, dateOfBirth, citizenship, netWorthUSD, occupation,
//                    employer, positionHeld, officialWebsite
//      • Edges      :SPOUSE_OF, :FATHER_OF, :MOTHER_OF, :CHILD_OF, :SIBLING_OF,
//                    :RELATIVE_OF  (identical casing to prior datasets)
// -----------------------------------------------------------------------------

// >>>  Replace with the actual HTTPS link of your JSON file  <<<
WITH "https://YOUR_BUCKET/data.json" AS url

////////////////////////////////////////////////////////////////////////
// 0. Schema – create once (idempotent) //////////////////////////////////
////////////////////////////////////////////////////////////////////////
CREATE CONSTRAINT person_qid IF NOT EXISTS
FOR (p:Person)
REQUIRE p.qid IS UNIQUE;

////////////////////////////////////////////////////////////////////////
// 1. Load & upsert Person nodes ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
CALL apoc.load.json(url) YIELD value
UNWIND value.persons AS person
WITH person
MERGE (p:Person {qid: person.id})
SET  p.name           = coalesce(person.props.name,            p.name),
     p.dateOfBirth    = coalesce(person.props.dateOfBirth,     p.dateOfBirth),
     p.citizenship    = coalesce(person.props.citizenship,     p.citizenship),
     p.netWorthUSD    = coalesce(toFloatOrNull(person.props.netWorth), p.netWorthUSD),
     p.occupation     = coalesce(person.props.occupation,      p.occupation),
     p.employer       = coalesce(person.props.employer,        p.employer),
     p.positionHeld   = coalesce(person.props.positionHeld,    p.positionHeld),
     p.officialWebsite= coalesce(person.props.officialWebsite, p.officialWebsite);

////////////////////////////////////////////////////////////////////////
// 2. Load relationships  ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
// Helper list – relationships that should be symmetrical (undirected)
WITH url, ["SPOUSE_OF","SIBLING_OF","RELATIVE_OF"] AS symmetricRTs
CALL apoc.load.json(url) YIELD value
UNWIND value.edges AS edge
MATCH (a:Person {qid: edge.seed})
MATCH (b:Person {qid: edge.rel})
WITH a, b, edge.relType AS rt, symmetricRTs
CALL apoc.do.when(
  rt IN symmetricRTs,
  // If symmetric: create both directions
  "MERGE (a)-[r1:`"+rt+"`]->(b)\n MERGE (a)<-[r2:`"+rt+"`]- (b) RETURN 1",
  // Else: single direction
  "MERGE (a)-[r:`"+rt+"`]->(b) RETURN 1",
  {a:a, b:b}
) YIELD value
RETURN count(*) AS rels_loaded;

////////////////////////////////////////////////////////////////////////
// 3. Post‑import sanity checks  ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
// --- Persons loaded
MATCH (p:Person) RETURN count(p) AS persons;
// --- Relationship breakdown
MATCH ()-[r]->() RETURN type(r) AS relType, count(*) AS n ORDER BY n DESC;

////////////////////////////////////////////////////////////////////////
// 4. Utility – parse netWorth safely ///////////////////////////////////
////////////////////////////////////////////////////////////////////////
//  Neo4j ≤5.17 lacks toFloatOrNull; add inline helper via APOC
//  (Aura includes APOC Core)
CALL apoc.custom.declareFunction(
  "toFloatOrNull(str :: STRING?) :: FLOAT?",
  "RETURN CASE WHEN str IS NULL OR str = '' THEN NULL ELSE toFloat(str) END AS value"
);
